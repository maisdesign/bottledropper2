{"version":3,"mappings":"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","names":["BootScene","Scene","width","height","loadingText","progressBg","progressBar","value","translations","_LanguageManager","__publicField","savedLanguage","browserLanguage","language","callback","key","newLanguage","LanguageManager","languageManager","_CharacterManager","savedCharacter","character","char","t","characters","nextIndex","CharacterManager","characterManager","GameScene","hearts","currentCharacter","newCharacter","_a","pointer","margin","text","minX","maxX","x","isGreen","bottle","minDelay","maxDelay","random","exponentialFactor","randomDelay","powerup","velocityY","velocityX","_bucket","stack","gameOverText","finalScoreText","restartText","cursors","speed","_b","_c","config","game","initializeGame","Game","getGame","destroyGame","supabaseUrl","supabaseAnonKey","supabase","createClient","profileService","userId","data","error","profile","updates","nickname","excludeUserId","query","AuthManager","sessionPromise","timeoutPromise","_","reject","session","event","listener","index","email","token","authManager","requireAuth","resolve","unsubscribe","state","__vitePreload","AuthModal","modal","success","canPlay","gamePaused","initializeLanguage","updateTranslations","translation","element","updateFooterControls","langBtn","currentLang","charBtn","characterName","footerElement","gameInstance","touchLeftPressed","touchRightPressed","handleTouchControls","gameScene","touchLeft","touchRight"],"sources":["../../src/scenes/BootScene.ts","../../src/i18n/translations.ts","../../src/i18n/LanguageManager.ts","../../src/systems/CharacterManager.ts","../../src/scenes/GameScene.ts","../../src/main.ts","../../src/systems/SupabaseClient.ts","../../src/systems/AuthManager.ts","../../index.html?html-proxy&index=1.js"],"sourcesContent":["import { Scene } from 'phaser'\r\n\r\nexport class BootScene extends Scene {\r\n  constructor() {\r\n    super({ key: 'BootScene' })\r\n  }\r\n\r\n  preload(): void {\r\n    console.log('🔧 BootScene: Starting asset loading...')\r\n\r\n    // Create simple loading graphics\r\n    this.createLoadingUI()\r\n\r\n    // Load basic game assets - using simple rectangles for now\r\n    this.load.image('bottle', 'data:image/svg+xml;base64,' + btoa(`\r\n      <svg width=\"20\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <rect width=\"20\" height=\"40\" fill=\"#8B4513\" stroke=\"#654321\" stroke-width=\"2\"/>\r\n        <rect x=\"5\" y=\"5\" width=\"10\" height=\"30\" fill=\"#A0522D\"/>\r\n      </svg>\r\n    `))\r\n\r\n    this.load.image('bottle_green', 'data:image/svg+xml;base64,' + btoa(`\r\n      <svg width=\"20\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <rect width=\"20\" height=\"40\" fill=\"#228B22\" stroke=\"#006400\" stroke-width=\"2\"/>\r\n        <rect x=\"5\" y=\"5\" width=\"10\" height=\"30\" fill=\"#32CD32\"/>\r\n        <text x=\"10\" y=\"25\" text-anchor=\"middle\" fill=\"white\" font-size=\"10\">X</text>\r\n      </svg>\r\n    `))\r\n\r\n    this.load.image('powerup_star', 'data:image/svg+xml;base64,' + btoa(`\r\n      <svg width=\"30\" height=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <polygon points=\"15,2 18,10 27,10 20,16 23,25 15,20 7,25 10,16 3,10 12,10\"\r\n                 fill=\"#FFD700\" stroke=\"#FFA500\" stroke-width=\"2\"/>\r\n        <circle cx=\"15\" cy=\"15\" r=\"3\" fill=\"#FFFF00\"/>\r\n      </svg>\r\n    `))\r\n\r\n    // Character sprites - Load real mascot images\r\n    this.load.image('charlie', '/characters/charlie.png')\r\n    this.load.image('scrocca', '/characters/scrocca.png')\r\n    this.load.image('leprecauno', '/characters/leprecauno.png')\r\n\r\n    this.load.image('bucket', 'data:image/svg+xml;base64,' + btoa(`\r\n      <svg width=\"80\" height=\"60\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M10,20 L70,20 L65,55 L15,55 Z\" fill=\"#888888\" stroke=\"#666666\" stroke-width=\"2\"/>\r\n        <rect x=\"10\" y=\"15\" width=\"60\" height=\"10\" fill=\"#AAAAAA\"/>\r\n      </svg>\r\n    `))\r\n\r\n    this.load.image('background', 'data:image/svg+xml;base64,' + btoa(`\r\n      <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <defs>\r\n          <linearGradient id=\"skyGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n            <stop offset=\"0%\" style=\"stop-color:#87CEEB;stop-opacity:1\" />\r\n            <stop offset=\"100%\" style=\"stop-color:#E0F6FF;stop-opacity:1\" />\r\n          </linearGradient>\r\n        </defs>\r\n        <rect width=\"800\" height=\"600\" fill=\"url(#skyGradient)\"/>\r\n      </svg>\r\n    `))\r\n  }\r\n\r\n  create(): void {\r\n    console.log('✅ BootScene: Assets loaded, transitioning to GameScene')\r\n\r\n    // Smooth transition to game\r\n    this.cameras.main.fadeOut(300, 0, 0, 0)\r\n    this.cameras.main.once('camerafadeoutcomplete', () => {\r\n      this.scene.start('GameScene')\r\n    })\r\n  }\r\n\r\n  private createLoadingUI(): void {\r\n    const { width, height } = this.cameras.main\r\n\r\n    // Loading text\r\n    const loadingText = this.add.text(width / 2, height / 2 - 50, 'Loading...', {\r\n      fontSize: '32px',\r\n      color: '#ffffff',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(0.5)\r\n\r\n    // Loading bar background\r\n    const progressBg = this.add.graphics()\r\n    progressBg.fillStyle(0x000000, 0.3)\r\n    progressBg.fillRect(width / 2 - 150, height / 2, 300, 20)\r\n\r\n    // Loading bar\r\n    const progressBar = this.add.graphics()\r\n\r\n    // Update loading bar\r\n    this.load.on('progress', (value: number) => {\r\n      progressBar.clear()\r\n      progressBar.fillStyle(0x00ff00)\r\n      progressBar.fillRect(width / 2 - 150, height / 2, 300 * value, 20)\r\n    })\r\n\r\n    this.load.on('complete', () => {\r\n      loadingText.setText('Ready!')\r\n      progressBar.clear()\r\n      progressBg.clear()\r\n    })\r\n  }\r\n}","export interface Translation {\r\n  // Homepage\r\n  title: string\r\n  subtitle: string\r\n  version: string\r\n  newGame: string\r\n  pause: string\r\n  resume: string\r\n  instructions: string\r\n  footerMadeBy: string\r\n  footerControls: string\r\n\r\n  // Instructions\r\n  instructionsTitle: string\r\n  instructionsObjective: string\r\n  instructionsControls: string\r\n  instructionsRules: string\r\n  instructionsTips: string\r\n  instructionsGoodLuck: string\r\n  instructionsArrowKeys: string\r\n  instructionsMouseDrag: string\r\n  instructionsMobileTouch: string\r\n  instructionsBrownBottles: string\r\n  instructionsGreenBottles: string\r\n  instructionsStarPowerups: string\r\n  instructionsLives: string\r\n  instructionsTimer: string\r\n  instructionsCatchStars: string\r\n  instructionsAllGoodMode: string\r\n  instructionsHighScore: string\r\n\r\n  // Game UI\r\n  score: string\r\n  lives: string\r\n  time: string\r\n  allGood: string\r\n  gameInstructions: string\r\n  gameRules: string\r\n  gameOver: string\r\n  finalScore: string\r\n  restartMessage: string\r\n\r\n  // Auth Modal\r\n  authWelcome: string\r\n  authSignInToPlay: string\r\n  authContinueGoogle: string\r\n  authContinueEmail: string\r\n  authEmailTitle: string\r\n  authEmailSubtitle: string\r\n  authSendCode: string\r\n  authBack: string\r\n  authVerifyTitle: string\r\n  authVerifySubtitle: string\r\n  authVerify: string\r\n  authProfileTitle: string\r\n  authProfileSubtitle: string\r\n  authNicknamePlaceholder: string\r\n  authMarketingConsent: string\r\n  authStartPlaying: string\r\n  authProcessing: string\r\n  authEmailPlaceholder: string\r\n  authOtpPlaceholder: string\r\n\r\n  // Auth Messages\r\n  authInvalidEmail: string\r\n  authCodeSent: string\r\n  authInvalidCode: string\r\n  authCodeLength: string\r\n  authFailed: string\r\n  authUnexpectedError: string\r\n  authGoogleFailed: string\r\n  authSendFailed: string\r\n  authVerifyFailed: string\r\n  authProfileFailed: string\r\n\r\n\r\n  // Character System\r\n  footerControlsCharacter: string\r\n  characterCharlie: string\r\n  characterScrocca: string\r\n  characterLeprecauno: string\r\n}\r\n\r\nexport const translations = {\r\n  en: {\r\n    // Homepage\r\n    title: 'Etimuè Bottle Dropper',\r\n    subtitle: 'Catch the falling bottles!',\r\n    version: 'v2.0.0 - Clean Architecture',\r\n    newGame: 'New Game',\r\n    pause: 'Pause',\r\n    resume: 'Resume',\r\n    instructions: 'Instructions',\r\n    footerMadeBy: 'Made with ❤️ by Etimuè',\r\n    footerControls: 'Use arrow keys or mouse to control the bucket',\r\n\r\n    // Instructions\r\n    instructionsTitle: '🎮 How to Play:',\r\n    instructionsObjective: '🎯 Objective: Catch falling bottles with your bucket!',\r\n    instructionsControls: '🕹️ Controls:',\r\n    instructionsRules: '🍶 Game Rules:',\r\n    instructionsTips: '🏆 Tips:',\r\n    instructionsGoodLuck: 'Good luck! 🎮',\r\n    instructionsArrowKeys: '• Use ← → arrow keys to move',\r\n    instructionsMouseDrag: '• Or click and drag with mouse/touch',\r\n    instructionsMobileTouch: '• On mobile: Use touch controls at bottom',\r\n    instructionsBrownBottles: '• Brown bottles: +1 point each',\r\n    instructionsGreenBottles: '• Green bottles: Lose 1 life (unless All Good mode)',\r\n    instructionsStarPowerups: '• ⭐ Star power-ups: Activate All Good mode',\r\n    instructionsLives: '• 💗 You have 3 lives',\r\n    instructionsTimer: '• ⏰ 60 seconds to play',\r\n    instructionsCatchStars: '• Catch star power-ups to avoid green bottle damage',\r\n    instructionsAllGoodMode: '• All Good mode makes green bottles worth +1 point',\r\n    instructionsHighScore: '• Try to get the highest score possible!',\r\n\r\n    // Game UI\r\n    score: 'Score',\r\n    lives: 'Lives',\r\n    time: 'Time',\r\n    allGood: 'ALL GOOD',\r\n    gameInstructions: 'Use arrow keys or drag to move the bucket!',\r\n    gameRules: '🍶 Catch brown bottles: +1pt | 🟢 Avoid green bottles: -1 life | ⭐ Star: All Good!',\r\n    gameOver: 'GAME OVER!',\r\n    finalScore: 'Final Score',\r\n    restartMessage: 'Click \"New Game\" to restart',\r\n\r\n    // Auth Modal\r\n    authWelcome: '🎮 Welcome to Etimuè Bottle Dropper!',\r\n    authSignInToPlay: 'Sign in to play and compete for prizes',\r\n    authContinueGoogle: 'Continue with Google',\r\n    authContinueEmail: 'Continue with Email',\r\n    authEmailTitle: '📧 Sign in with Email',\r\n    authEmailSubtitle: \"We'll send you a verification code\",\r\n    authSendCode: 'Send Code',\r\n    authBack: '← Back',\r\n    authVerifyTitle: '🔐 Enter Verification Code',\r\n    authVerifySubtitle: 'Check your email for the 6-digit code',\r\n    authVerify: 'Verify',\r\n    authProfileTitle: '👤 Setup Your Profile',\r\n    authProfileSubtitle: 'Choose a nickname for the leaderboard',\r\n    authNicknamePlaceholder: 'Your nickname',\r\n    authMarketingConsent: 'I want to receive updates and compete for prizes',\r\n    authStartPlaying: 'Start Playing!',\r\n    authProcessing: 'Processing...',\r\n    authEmailPlaceholder: 'your@email.com',\r\n    authOtpPlaceholder: '000000',\r\n\r\n    // Auth Messages\r\n    authInvalidEmail: 'Please enter a valid email address',\r\n    authCodeSent: 'Verification code sent to your email!',\r\n    authInvalidCode: 'Invalid verification code',\r\n    authCodeLength: 'Please enter the 6-digit verification code',\r\n    authFailed: 'Authentication failed, please try again',\r\n    authUnexpectedError: 'Unexpected error during authentication',\r\n    authGoogleFailed: 'Google sign in failed',\r\n    authSendFailed: 'Failed to send verification code',\r\n    authVerifyFailed: 'Unexpected error during verification',\r\n    authProfileFailed: 'Failed to update profile',\r\n\r\n\r\n    // Character System\r\n    footerControlsCharacter: 'Use arrow keys or mouse to control {character}',\r\n    characterCharlie: 'Charlie',\r\n    characterScrocca: 'Scrocca',\r\n    characterLeprecauno: 'Leprechaun'\r\n  } as Translation,\r\n\r\n  it: {\r\n    // Homepage\r\n    title: 'Etimuè Bottle Dropper',\r\n    subtitle: 'Prendi le bottiglie che cadono!',\r\n    version: 'v2.0.0 - Architettura Pulita',\r\n    newGame: 'Nuova Partita',\r\n    pause: 'Pausa',\r\n    resume: 'Riprendi',\r\n    instructions: 'Istruzioni',\r\n    footerMadeBy: 'Fatto con ❤️ da Etimuè',\r\n    footerControls: 'Usa le frecce o il mouse per controllare il secchio',\r\n\r\n    // Instructions\r\n    instructionsTitle: '🎮 Come Giocare:',\r\n    instructionsObjective: '🎯 Obiettivo: Prendi le bottiglie che cadono con il tuo secchio!',\r\n    instructionsControls: '🕹️ Controlli:',\r\n    instructionsRules: '🍶 Regole del Gioco:',\r\n    instructionsTips: '🏆 Suggerimenti:',\r\n    instructionsGoodLuck: 'Buona fortuna! 🎮',\r\n    instructionsArrowKeys: '• Usa le frecce ← → per muoverti',\r\n    instructionsMouseDrag: '• Oppure clicca e trascina con mouse/touch',\r\n    instructionsMobileTouch: '• Su mobile: Usa i controlli touch in basso',\r\n    instructionsBrownBottles: '• Bottiglie marroni: +1 punto ciascuna',\r\n    instructionsGreenBottles: '• Bottiglie verdi: Perdi 1 vita (tranne in modalità All Good)',\r\n    instructionsStarPowerups: '• ⭐ Power-up stella: Attiva modalità All Good',\r\n    instructionsLives: '• 💗 Hai 3 vite',\r\n    instructionsTimer: '• ⏰ 60 secondi per giocare',\r\n    instructionsCatchStars: '• Prendi i power-up stella per evitare danni dalle bottiglie verdi',\r\n    instructionsAllGoodMode: '• La modalità All Good rende le bottiglie verdi del valore di +1 punto',\r\n    instructionsHighScore: '• Cerca di ottenere il punteggio più alto possibile!',\r\n\r\n    // Game UI\r\n    score: 'Punteggio',\r\n    lives: 'Vite',\r\n    time: 'Tempo',\r\n    allGood: 'ALL GOOD',\r\n    gameInstructions: 'Usa le frecce o trascina per muovere il secchio!',\r\n    gameRules: '🍶 Prendi bottiglie marroni: +1pt | 🟢 Evita bottiglie verdi: -1 vita | ⭐ Stella: All Good!',\r\n    gameOver: 'GAME OVER!',\r\n    finalScore: 'Punteggio Finale',\r\n    restartMessage: 'Clicca \"Nuova Partita\" per ricominciare',\r\n\r\n    // Auth Modal\r\n    authWelcome: '🎮 Benvenuto su Etimuè Bottle Dropper!',\r\n    authSignInToPlay: 'Accedi per giocare e competere per i premi',\r\n    authContinueGoogle: 'Continua con Google',\r\n    authContinueEmail: 'Continua con Email',\r\n    authEmailTitle: '📧 Accedi con Email',\r\n    authEmailSubtitle: 'Ti invieremo un codice di verifica',\r\n    authSendCode: 'Invia Codice',\r\n    authBack: '← Indietro',\r\n    authVerifyTitle: '🔐 Inserisci Codice di Verifica',\r\n    authVerifySubtitle: 'Controlla la tua email per il codice a 6 cifre',\r\n    authVerify: 'Verifica',\r\n    authProfileTitle: '👤 Configura il Tuo Profilo',\r\n    authProfileSubtitle: 'Scegli un nickname per la classifica',\r\n    authNicknamePlaceholder: 'Il tuo nickname',\r\n    authMarketingConsent: 'Voglio ricevere aggiornamenti e competere per i premi',\r\n    authStartPlaying: 'Inizia a Giocare!',\r\n    authProcessing: 'Elaborazione...',\r\n    authEmailPlaceholder: 'tua@email.com',\r\n    authOtpPlaceholder: '000000',\r\n\r\n    // Auth Messages\r\n    authInvalidEmail: 'Inserisci un indirizzo email valido',\r\n    authCodeSent: 'Codice di verifica inviato alla tua email!',\r\n    authInvalidCode: 'Codice di verifica non valido',\r\n    authCodeLength: 'Inserisci il codice di verifica a 6 cifre',\r\n    authFailed: 'Autenticazione fallita, riprova',\r\n    authUnexpectedError: 'Errore imprevisto durante l\\'autenticazione',\r\n    authGoogleFailed: 'Accesso con Google fallito',\r\n    authSendFailed: 'Invio del codice di verifica fallito',\r\n    authVerifyFailed: 'Errore imprevisto durante la verifica',\r\n    authProfileFailed: 'Aggiornamento del profilo fallito',\r\n\r\n\r\n    // Character System\r\n    footerControlsCharacter: 'Usa le frecce o il mouse per controllare {character}',\r\n    characterCharlie: 'Charlie',\r\n    characterScrocca: 'Scrocca',\r\n    characterLeprecauno: 'Leprecauno'\r\n  } as Translation\r\n}\r\n\r\nexport type Language = keyof typeof translations","import { translations, Language, Translation } from './translations'\r\n\r\nexport class LanguageManager {\r\n  private static instance: LanguageManager\r\n  private currentLanguage: Language = 'en'\r\n  private callbacks: Set<(language: Language) => void> = new Set()\r\n\r\n  private constructor() {\r\n    // Initialize from localStorage or browser language\r\n    const savedLanguage = localStorage.getItem('etimue-language') as Language\r\n    const browserLanguage = navigator.language.toLowerCase()\r\n\r\n    if (savedLanguage && savedLanguage in translations) {\r\n      this.currentLanguage = savedLanguage\r\n    } else if (browserLanguage.startsWith('it')) {\r\n      this.currentLanguage = 'it'\r\n    } else {\r\n      this.currentLanguage = 'en'\r\n    }\r\n\r\n    console.log(`🌍 Language initialized: ${this.currentLanguage}`)\r\n  }\r\n\r\n  public static getInstance(): LanguageManager {\r\n    if (!LanguageManager.instance) {\r\n      LanguageManager.instance = new LanguageManager()\r\n    }\r\n    return LanguageManager.instance\r\n  }\r\n\r\n  public getCurrentLanguage(): Language {\r\n    return this.currentLanguage\r\n  }\r\n\r\n  public setLanguage(language: Language): void {\r\n    if (language !== this.currentLanguage && language in translations) {\r\n      this.currentLanguage = language\r\n      localStorage.setItem('etimue-language', language)\r\n\r\n      console.log(`🌍 Language changed to: ${language}`)\r\n\r\n      // Notify all subscribers\r\n      this.callbacks.forEach(callback => callback(language))\r\n    }\r\n  }\r\n\r\n  public getTranslation(): Translation {\r\n    return translations[this.currentLanguage]\r\n  }\r\n\r\n  public translate(key: keyof Translation): string {\r\n    return translations[this.currentLanguage][key]\r\n  }\r\n\r\n  public onLanguageChange(callback: (language: Language) => void): void {\r\n    this.callbacks.add(callback)\r\n  }\r\n\r\n  public offLanguageChange(callback: (language: Language) => void): void {\r\n    this.callbacks.delete(callback)\r\n  }\r\n\r\n  public toggleLanguage(): void {\r\n    const newLanguage: Language = this.currentLanguage === 'en' ? 'it' : 'en'\r\n    this.setLanguage(newLanguage)\r\n  }\r\n\r\n  public getAvailableLanguages(): Language[] {\r\n    return Object.keys(translations) as Language[]\r\n  }\r\n\r\n  public getLanguageDisplayName(language: Language): string {\r\n    switch (language) {\r\n      case 'en': return 'English'\r\n      case 'it': return 'Italiano'\r\n      default: return language\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const languageManager = LanguageManager.getInstance()","import { languageManager } from '../i18n/LanguageManager'\r\n\r\nexport type Character = 'charlie' | 'scrocca' | 'leprecauno'\r\n\r\nexport interface CharacterInfo {\r\n  id: Character\r\n  name: string\r\n  sprite: string\r\n  description: string\r\n}\r\n\r\nexport class CharacterManager {\r\n  private static instance: CharacterManager\r\n  private currentCharacter: Character = 'charlie'\r\n  private callbacks: Set<(character: Character) => void> = new Set()\r\n\r\n  private constructor() {\r\n    // Load from localStorage with migration support\r\n    let savedCharacter = localStorage.getItem('etimue-character') as Character\r\n\r\n    // Migration: convert old 'irlandese' to new 'leprecauno'\r\n    if (savedCharacter === 'irlandese' as any) {\r\n      savedCharacter = 'leprecauno'\r\n      localStorage.setItem('etimue-character', savedCharacter)\r\n      console.log(`🔄 Migrated character from 'irlandese' to 'leprecauno'`)\r\n    }\r\n\r\n    if (savedCharacter && this.isValidCharacter(savedCharacter)) {\r\n      this.currentCharacter = savedCharacter\r\n    }\r\n\r\n    console.log(`🐱 Character initialized: ${this.currentCharacter}`)\r\n  }\r\n\r\n  public static getInstance(): CharacterManager {\r\n    if (!CharacterManager.instance) {\r\n      CharacterManager.instance = new CharacterManager()\r\n    }\r\n    return CharacterManager.instance\r\n  }\r\n\r\n  private isValidCharacter(character: string): character is Character {\r\n    return ['charlie', 'scrocca', 'leprecauno'].includes(character)\r\n  }\r\n\r\n  public getCurrentCharacter(): Character {\r\n    return this.currentCharacter\r\n  }\r\n\r\n  public setCharacter(character: Character): void {\r\n    if (character !== this.currentCharacter && this.isValidCharacter(character)) {\r\n      this.currentCharacter = character\r\n      localStorage.setItem('etimue-character', character)\r\n\r\n      console.log(`🐱 Character changed to: ${character}`)\r\n\r\n      // Notify all subscribers\r\n      this.callbacks.forEach(callback => callback(character))\r\n    }\r\n  }\r\n\r\n  public getCharacterInfo(character?: Character): CharacterInfo {\r\n    const char = character || this.currentCharacter\r\n    const t = languageManager.getTranslation()\r\n\r\n    switch (char) {\r\n      case 'charlie':\r\n        return {\r\n          id: 'charlie',\r\n          name: t.characterCharlie,\r\n          sprite: 'charlie',\r\n          description: 'Punk cat with attitude'\r\n        }\r\n      case 'scrocca':\r\n        return {\r\n          id: 'scrocca',\r\n          name: t.characterScrocca,\r\n          sprite: 'scrocca',\r\n          description: 'Party cat who loves fun'\r\n        }\r\n      case 'leprecauno':\r\n        return {\r\n          id: 'leprecauno',\r\n          name: t.characterLeprecauno,\r\n          sprite: 'leprecauno',\r\n          description: 'Lucky Irish leprechaun cat'\r\n        }\r\n      default:\r\n        return this.getCharacterInfo('charlie')\r\n    }\r\n  }\r\n\r\n  public getCurrentCharacterName(): string {\r\n    return this.getCharacterInfo().name\r\n  }\r\n\r\n  public getAllCharacters(): CharacterInfo[] {\r\n    return ['charlie', 'scrocca', 'leprecauno'].map(char => this.getCharacterInfo(char as Character))\r\n  }\r\n\r\n  public onCharacterChange(callback: (character: Character) => void): void {\r\n    this.callbacks.add(callback)\r\n  }\r\n\r\n  public offCharacterChange(callback: (character: Character) => void): void {\r\n    this.callbacks.delete(callback)\r\n  }\r\n\r\n  public cycleCharacter(): void {\r\n    const characters: Character[] = ['charlie', 'scrocca', 'leprecauno']\r\n    const currentIndex = characters.indexOf(this.currentCharacter)\r\n    const nextIndex = (currentIndex + 1) % characters.length\r\n    this.setCharacter(characters[nextIndex])\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const characterManager = CharacterManager.getInstance()","import { Scene } from 'phaser'\r\nimport { languageManager } from '../i18n/LanguageManager'\r\nimport { characterManager } from '../systems/CharacterManager'\r\n\r\nexport class GameScene extends Scene {\r\n  private character!: Phaser.Physics.Arcade.Image\r\n  private bottles!: Phaser.Physics.Arcade.Group\r\n  private powerups!: Phaser.Physics.Arcade.Group\r\n  private score: number = 0\r\n  private lives: number = 3\r\n  private timeLeft: number = 60 // 60 seconds game\r\n  private scoreText!: Phaser.GameObjects.Text\r\n  private livesText!: Phaser.GameObjects.Text\r\n  private timerText!: Phaser.GameObjects.Text\r\n  private powerupText!: Phaser.GameObjects.Text\r\n  private instructionsText!: Phaser.GameObjects.Text\r\n  private rulesText!: Phaser.GameObjects.Text\r\n  private languageChangeCallback?: (language: any) => void\r\n  private spawnTimer!: Phaser.Time.TimerEvent\r\n  private powerupTimer!: Phaser.Time.TimerEvent\r\n  private gameTimer!: Phaser.Time.TimerEvent\r\n  private allGoodTimer!: Phaser.Time.TimerEvent\r\n  private gameStarted: boolean = false\r\n  private gameOver: boolean = false\r\n  private allGoodMode: boolean = false\r\n  private allGoodTimeLeft: number = 0\r\n  private gameOverTexts: Phaser.GameObjects.Text[] = []\r\n\r\n  constructor() {\r\n    super({ key: 'GameScene' })\r\n  }\r\n\r\n  create(): void {\r\n    console.log('🎮 GameScene: Initializing game...')\r\n\r\n    // Set background\r\n    const { width, height } = this.cameras.main\r\n    this.add.image(width / 2, height / 2, 'background')\r\n\r\n    this.setupUI()\r\n    this.setupGameObjects()\r\n    this.setupInput()\r\n    this.setupCollisions()\r\n\r\n    // Fade in\r\n    this.cameras.main.fadeIn(300, 0, 0, 0)\r\n\r\n    console.log('✅ GameScene: Ready to play!')\r\n  }\r\n\r\n  private setupUI(): void {\r\n    const { width, height } = this.cameras.main\r\n    const t = languageManager.getTranslation()\r\n\r\n    // Score display\r\n    this.scoreText = this.add.text(16, 16, `${t.score}: 0`, {\r\n      fontSize: '24px',\r\n      color: '#000000',\r\n      fontFamily: 'Arial'\r\n    })\r\n\r\n    // Lives display\r\n    this.livesText = this.add.text(16, 50, `${t.lives}: ❤️❤️❤️`, {\r\n      fontSize: '20px',\r\n      color: '#000000',\r\n      fontFamily: 'Arial'\r\n    })\r\n\r\n    // Timer display\r\n    this.timerText = this.add.text(width / 2, 16, `${t.time}: 60s`, {\r\n      fontSize: '24px',\r\n      color: '#000000',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(0.5)\r\n\r\n    // Power-up indicator - positioned from right edge with right alignment\r\n    this.powerupText = this.add.text(width - 16, 16, '', {\r\n      fontSize: '18px',\r\n      color: '#FFD700',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(1, 0) // Right-aligned\r\n\r\n    // Instructions\r\n    this.instructionsText = this.add.text(width / 2, height * 0.12, t.gameInstructions, {\r\n      fontSize: Math.min(18, width * 0.025) + 'px',\r\n      color: '#000000',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(0.5)\r\n\r\n    this.rulesText = this.add.text(width / 2, height * 0.16, t.gameRules, {\r\n      fontSize: Math.min(14, width * 0.018) + 'px',\r\n      color: '#333333',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(0.5)\r\n\r\n    // Listen for language changes and update UI texts\r\n    this.languageChangeCallback = () => {\r\n      this.updateUITexts()\r\n    }\r\n    languageManager.onLanguageChange(this.languageChangeCallback)\r\n  }\r\n\r\n  private updateUITexts(): void {\r\n    const t = languageManager.getTranslation()\r\n\r\n    // Update score text\r\n    this.scoreText.setText(`${t.score}: ${this.score}`)\r\n\r\n    // Update lives text\r\n    const hearts = '❤️'.repeat(this.lives)\r\n    this.livesText.setText(`${t.lives}: ${hearts}`)\r\n\r\n    // Update timer text\r\n    this.timerText.setText(`${t.time}: ${this.timeLeft}s`)\r\n\r\n    // Update instructions and rules\r\n    this.instructionsText.setText(t.gameInstructions)\r\n    this.rulesText.setText(t.gameRules)\r\n\r\n    // Update All Good text if active\r\n    if (this.allGoodMode) {\r\n      this.powerupText.setText(`⭐ ${t.allGood}: ${this.allGoodTimeLeft}s`)\r\n    }\r\n  }\r\n\r\n  private setupGameObjects(): void {\r\n    const { width, height } = this.cameras.main\r\n\r\n    // Create character (use current selected character)\r\n    const currentCharacter = characterManager.getCurrentCharacter()\r\n    this.character = this.physics.add.image(width / 2, height - 80, currentCharacter)\r\n    this.character.setCollideWorldBounds(true)\r\n    this.character.setImmovable(true)\r\n\r\n    // Scale character appropriately for gameplay\r\n    this.character.setScale(0.6) // Reduce size to 60%\r\n\r\n    // Listen for character changes\r\n    characterManager.onCharacterChange((newCharacter) => {\r\n      if (this.character) {\r\n        this.character.setTexture(newCharacter)\r\n        console.log(`🐱 Character sprite updated to: ${newCharacter}`)\r\n      }\r\n    })\r\n\r\n    // Create bottles group\r\n    this.bottles = this.physics.add.group({\r\n      defaultKey: 'bottle',\r\n      maxSize: 15\r\n    })\r\n\r\n    // Create powerups group\r\n    this.powerups = this.physics.add.group({\r\n      defaultKey: 'powerup_star',\r\n      maxSize: 3\r\n    })\r\n  }\r\n\r\n  private setupInput(): void {\r\n    // Keyboard controls\r\n    const cursors = this.input.keyboard?.createCursorKeys()\r\n    if (cursors) {\r\n      // Handle keyboard input in update loop\r\n    }\r\n\r\n    // Mouse/Touch controls\r\n    this.input.on('pointermove', (pointer: Phaser.Input.Pointer) => {\r\n      if (pointer.isDown) {\r\n        const { width } = this.cameras.main\r\n        const margin = Math.max(40, width * 0.05) // 5% margin or minimum 40px\r\n        this.character.x = Phaser.Math.Clamp(pointer.x, margin, width - margin)\r\n      }\r\n    })\r\n\r\n    this.input.on('pointerdown', () => {\r\n      // Only allow game start if not in game over state\r\n      if (!this.gameOver) {\r\n        this.startGame()\r\n      }\r\n    })\r\n  }\r\n\r\n  private setupCollisions(): void {\r\n    this.physics.add.overlap(\r\n      this.character,\r\n      this.bottles,\r\n      this.catchBottle,\r\n      undefined,\r\n      this\r\n    )\r\n\r\n    this.physics.add.overlap(\r\n      this.character,\r\n      this.powerups,\r\n      this.catchPowerup,\r\n      undefined,\r\n      this\r\n    )\r\n  }\r\n\r\n  private startGame(): void {\r\n    if (this.gameStarted) return\r\n\r\n    // Clear any previous game over texts\r\n    this.gameOverTexts.forEach(text => text.destroy())\r\n    this.gameOverTexts = []\r\n\r\n    // Reset game state for fresh start\r\n    this.lives = 3\r\n    this.score = 0\r\n    this.timeLeft = 60\r\n    this.gameOver = false\r\n    this.allGoodMode = false\r\n    this.allGoodTimeLeft = 0\r\n\r\n    // Update UI\r\n    this.updateLivesDisplay()\r\n    const t = languageManager.getTranslation()\r\n    this.scoreText.setText(`${t.score}: ${this.score}`)\r\n    this.timerText.setText(`${t.time}: ${this.timeLeft}s`)\r\n    this.powerupText.setText('')\r\n\r\n    this.gameStarted = true\r\n    console.log('🚀 GAME START DEBUG (RESET):')\r\n    console.log(`💗 Starting Lives: ${this.lives}`)\r\n    console.log(`🎯 Starting Score: ${this.score}`)\r\n    console.log(`⏰ Starting Time: ${this.timeLeft}s`)\r\n    console.log(`⭐ All Good Mode: ${this.allGoodMode}`)\r\n\r\n    // Start spawning bottles\r\n    this.spawnTimer = this.time.addEvent({\r\n      delay: 1000,\r\n      callback: this.spawnBottle,\r\n      callbackScope: this,\r\n      loop: true\r\n    })\r\n\r\n    // Start spawning powerups (random intervals)\r\n    this.scheduleNextPowerup()\r\n\r\n    // Start game timer\r\n    this.gameTimer = this.time.addEvent({\r\n      delay: 1000,\r\n      callback: this.updateTimer,\r\n      callbackScope: this,\r\n      loop: true\r\n    })\r\n  }\r\n\r\n  private spawnBottle(): void {\r\n    if (this.gameOver) return\r\n\r\n    const { width } = this.cameras.main\r\n    // Ensure bottles spawn well within screen bounds\r\n    const minX = 60\r\n    const maxX = width - 60\r\n    const x = Phaser.Math.Between(minX, maxX)\r\n\r\n    // 20% chance for green bottle (poison)\r\n    const isGreen = Math.random() < 0.2\r\n\r\n    const bottle = this.bottles.get(x, -50, 'bottle')\r\n    if (bottle) {\r\n      bottle.setActive(true)\r\n      bottle.setVisible(true)\r\n\r\n      // Change texture based on bottle type\r\n      if (isGreen) {\r\n        bottle.setTexture('bottle_green')\r\n        console.log(`🟢 GREEN bottle spawned at x:${x}`)\r\n      } else {\r\n        bottle.setTexture('bottle')\r\n        console.log(`🍶 BROWN bottle spawned at x:${x}`)\r\n      }\r\n\r\n      bottle.body.velocity.y = 200\r\n      bottle.body.velocity.x = Phaser.Math.Between(-50, 50)\r\n\r\n      // Set collision bounds to detect when bottle hits ground\r\n      bottle.body.setCollideWorldBounds(true)\r\n      bottle.body.setBounce(0)\r\n\r\n      // Check for ground collision in update loop\r\n      bottle.setData('checkGround', true)\r\n      bottle.setData('isGreen', isGreen)\r\n    }\r\n  }\r\n\r\n  private scheduleNextPowerup(): void {\r\n    if (this.gameOver) return\r\n\r\n    // More random delay between 5-30 seconds with weighted distribution\r\n    const minDelay = 5000\r\n    const maxDelay = 30000\r\n\r\n    // Use exponential distribution for more variety (favor shorter intervals but allow long ones)\r\n    const random = Math.random()\r\n    const exponentialFactor = Math.pow(random, 1.5) // Creates weighted distribution\r\n    const randomDelay = minDelay + (maxDelay - minDelay) * exponentialFactor\r\n\r\n    console.log(`⭐ Next power-up scheduled in ${(randomDelay / 1000).toFixed(1)}s`)\r\n\r\n    this.powerupTimer = this.time.addEvent({\r\n      delay: randomDelay,\r\n      callback: () => {\r\n        this.spawnPowerup()\r\n        this.scheduleNextPowerup() // Schedule the next one\r\n      },\r\n      callbackScope: this\r\n    })\r\n  }\r\n\r\n  private spawnPowerup(): void {\r\n    if (this.gameOver) return\r\n\r\n    const { width } = this.cameras.main\r\n    // Ensure powerups spawn well within screen bounds\r\n    const minX = 80\r\n    const maxX = width - 80\r\n    const x = Phaser.Math.Between(minX, maxX)\r\n\r\n    const powerup = this.powerups.get(x, -30, 'powerup_star')\r\n    if (powerup) {\r\n      powerup.setActive(true)\r\n      powerup.setVisible(true)\r\n\r\n      // Random velocity for more dynamic movement\r\n      const velocityY = Phaser.Math.Between(120, 180)\r\n      const velocityX = Phaser.Math.Between(-30, 30)\r\n\r\n      powerup.body.velocity.y = velocityY\r\n      powerup.body.velocity.x = velocityX\r\n\r\n      // Set collision bounds\r\n      powerup.body.setCollideWorldBounds(true)\r\n      powerup.body.setBounce(0)\r\n\r\n      // Check for ground collision in update loop\r\n      powerup.setData('checkGround', true)\r\n\r\n      console.log(`⭐ Power-up spawned at x:${x} with velocity(${velocityX}, ${velocityY})`)\r\n    }\r\n  }\r\n\r\n  private catchBottle(_bucket: any, bottle: any): void {\r\n    // Check if bottle is already inactive to prevent multiple scoring\r\n    if (!bottle.active) return\r\n\r\n    const isGreen = bottle.getData('isGreen')\r\n    console.log(`🎯 BOTTLE CATCH DEBUG:`)\r\n    console.log(`🍶 Bottle type: ${isGreen ? 'GREEN (poison)' : 'BROWN (normal)'}`)\r\n    console.log(`⭐ All Good Mode: ${this.allGoodMode}`)\r\n    console.log(`💗 Lives before catch: ${this.lives}`)\r\n\r\n    // Remove caught bottle immediately\r\n    this.bottles.killAndHide(bottle)\r\n    bottle.setActive(false)\r\n    bottle.setVisible(false)\r\n\r\n    if (isGreen && !this.allGoodMode) {\r\n      // Green bottle without All Good mode = lose life\r\n      console.log(`🚨 GREEN BOTTLE CAUGHT WITHOUT ALL GOOD - LOSING LIFE!`)\r\n      this.loseLife()\r\n    } else {\r\n      // Normal bottle or All Good mode active = gain points\r\n      this.score += 1\r\n      const t = languageManager.getTranslation()\r\n      this.scoreText.setText(`${t.score}: ${this.score}`)\r\n      console.log(`✅ ${isGreen ? 'Green bottle (All Good active)' : 'Brown bottle'} caught! +1 point. Score: ${this.score}`)\r\n    }\r\n  }\r\n\r\n  private catchPowerup(_bucket: any, powerup: any): void {\r\n    // Check if powerup is already inactive\r\n    if (!powerup.active) return\r\n\r\n    console.log(`⭐ POWERUP CATCH DEBUG:`)\r\n    console.log(`💗 Lives before powerup: ${this.lives}`)\r\n\r\n    // Remove caught powerup immediately\r\n    this.powerups.killAndHide(powerup)\r\n    powerup.setActive(false)\r\n    powerup.setVisible(false)\r\n\r\n    // Activate All Good mode for 10 seconds\r\n    this.activateAllGoodMode()\r\n\r\n    console.log(`✅ Power-up caught! All Good mode activated! Lives unchanged: ${this.lives}`)\r\n  }\r\n\r\n  private loseLife(): void {\r\n    if (this.gameOver) return\r\n\r\n    // Get stack trace to see who called this\r\n    const stack = new Error().stack\r\n    console.warn(`🚨 LIFE LOST DEBUG:`)\r\n    console.warn(`💔 Lives before: ${this.lives}`)\r\n    console.warn(`🔍 Called from:`, stack?.split('\\n').slice(1, 4))\r\n    console.warn(`⭐ All Good Mode: ${this.allGoodMode}`)\r\n\r\n    this.lives -= 1\r\n    this.updateLivesDisplay()\r\n\r\n    console.warn(`💔 Lives after: ${this.lives}`)\r\n\r\n    if (this.lives <= 0) {\r\n      console.warn(`☠️ GAME OVER - No lives remaining`)\r\n      this.endGame()\r\n    }\r\n  }\r\n\r\n  private updateLivesDisplay(): void {\r\n    const hearts = '❤️'.repeat(this.lives)\r\n    const t = languageManager.getTranslation()\r\n    this.livesText.setText(`${t.lives}: ${hearts}`)\r\n  }\r\n\r\n  private updateTimer(): void {\r\n    if (this.gameOver) return\r\n\r\n    this.timeLeft -= 1\r\n    const t = languageManager.getTranslation()\r\n    this.timerText.setText(`${t.time}: ${this.timeLeft}s`)\r\n\r\n    if (this.timeLeft <= 0) {\r\n      this.endGame()\r\n    }\r\n  }\r\n\r\n  private activateAllGoodMode(): void {\r\n    this.allGoodMode = true\r\n    this.allGoodTimeLeft = 10\r\n\r\n    // Update UI\r\n    const t = languageManager.getTranslation()\r\n    this.powerupText.setText(`⭐ ${t.allGood}: ${this.allGoodTimeLeft}s`)\r\n\r\n    // Start countdown timer\r\n    if (this.allGoodTimer) {\r\n      this.allGoodTimer.destroy()\r\n    }\r\n\r\n    this.allGoodTimer = this.time.addEvent({\r\n      delay: 1000,\r\n      callback: this.updateAllGoodMode,\r\n      callbackScope: this,\r\n      loop: true\r\n    })\r\n  }\r\n\r\n  private updateAllGoodMode(): void {\r\n    if (!this.allGoodMode) return\r\n\r\n    this.allGoodTimeLeft -= 1\r\n    const t = languageManager.getTranslation()\r\n    this.powerupText.setText(`⭐ ${t.allGood}: ${this.allGoodTimeLeft}s`)\r\n\r\n    if (this.allGoodTimeLeft <= 0) {\r\n      this.deactivateAllGoodMode()\r\n    }\r\n  }\r\n\r\n  private deactivateAllGoodMode(): void {\r\n    this.allGoodMode = false\r\n    this.allGoodTimeLeft = 0\r\n    this.powerupText.setText('')\r\n\r\n    if (this.allGoodTimer) {\r\n      this.allGoodTimer.destroy()\r\n    }\r\n\r\n    console.log('⭐ All Good mode deactivated')\r\n  }\r\n\r\n  private endGame(): void {\r\n    this.gameOver = true\r\n    this.gameStarted = false\r\n\r\n    // Stop all timers\r\n    if (this.spawnTimer) this.spawnTimer.destroy()\r\n    if (this.powerupTimer) this.powerupTimer.destroy()\r\n    if (this.gameTimer) this.gameTimer.destroy()\r\n    if (this.allGoodTimer) this.allGoodTimer.destroy()\r\n\r\n    // Deactivate any active powerups\r\n    this.deactivateAllGoodMode()\r\n\r\n    // Show game over message\r\n    const { width, height } = this.cameras.main\r\n    const t = languageManager.getTranslation()\r\n\r\n    const gameOverText = this.add.text(width / 2, height / 2, t.gameOver, {\r\n      fontSize: Math.min(48, width * 0.06) + 'px',\r\n      color: '#ff0000',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(0.5)\r\n\r\n    const finalScoreText = this.add.text(width / 2, height / 2 + 50, `${t.finalScore}: ${this.score}`, {\r\n      fontSize: Math.min(24, width * 0.03) + 'px',\r\n      color: '#000000',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(0.5)\r\n\r\n    const restartText = this.add.text(width / 2, height / 2 + 100, t.restartMessage, {\r\n      fontSize: Math.min(18, width * 0.025) + 'px',\r\n      color: '#666666',\r\n      fontFamily: 'Arial'\r\n    }).setOrigin(0.5)\r\n\r\n    // Store game over texts for cleanup\r\n    this.gameOverTexts.push(gameOverText, finalScoreText, restartText)\r\n\r\n    console.log(`🎮 Game Over! Final Score: ${this.score}`)\r\n  }\r\n\r\n  update(): void {\r\n    if (this.gameOver) return\r\n\r\n    const { width, height } = this.cameras.main\r\n\r\n    // Keyboard controls\r\n    const cursors = this.input.keyboard?.createCursorKeys()\r\n    if (cursors) {\r\n      const margin = Math.max(40, width * 0.05) // 5% margin or minimum 40px\r\n      const speed = Math.max(5, width * 0.006) // Responsive speed based on screen width\r\n      if (cursors.left?.isDown) {\r\n        this.character.x = Math.max(margin, this.character.x - speed)\r\n      } else if (cursors.right?.isDown) {\r\n        this.character.x = Math.min(width - margin, this.character.x + speed)\r\n      }\r\n    }\r\n\r\n    // Check bottles that hit the ground\r\n    this.bottles.children.entries.forEach((bottle: any) => {\r\n      if (bottle.active && bottle.getData('checkGround')) {\r\n        // Check if bottle hit the bottom (ground)\r\n        if (bottle.y >= height - 20) { // Near bottom of screen\r\n          const isGreen = bottle.getData('isGreen')\r\n          console.log(`🌍 GROUND HIT: ${isGreen ? 'GREEN' : 'BROWN'} bottle hit ground - NO LIFE LOSS`)\r\n\r\n          this.bottles.killAndHide(bottle)\r\n          bottle.setActive(false)\r\n          bottle.setVisible(false)\r\n          // No life loss for bottles hitting ground - only when catching green bottles\r\n        }\r\n      }\r\n    })\r\n\r\n    // Check powerups that hit the ground\r\n    this.powerups.children.entries.forEach((powerup: any) => {\r\n      if (powerup.active && powerup.getData('checkGround')) {\r\n        // Check if powerup hit the bottom (ground)\r\n        if (powerup.y >= height - 20) { // Near bottom of screen\r\n          this.powerups.killAndHide(powerup)\r\n          powerup.setActive(false)\r\n          powerup.setVisible(false)\r\n          // No penalty for missing powerups\r\n        }\r\n      }\r\n    })\r\n\r\n    // Auto-start game after a few seconds if not started\r\n    if (!this.gameStarted && !this.gameOver && this.time.now > 3000) {\r\n      this.startGame()\r\n    }\r\n  }\r\n\r\n  shutdown(): void {\r\n    if (this.spawnTimer) {\r\n      this.spawnTimer.destroy()\r\n    }\r\n    if (this.powerupTimer) {\r\n      this.powerupTimer.destroy()\r\n    }\r\n    if (this.gameTimer) {\r\n      this.gameTimer.destroy()\r\n    }\r\n    if (this.allGoodTimer) {\r\n      this.allGoodTimer.destroy()\r\n    }\r\n\r\n    // Cleanup language listener\r\n    if (this.languageChangeCallback) {\r\n      languageManager.offLanguageChange(this.languageChangeCallback)\r\n    }\r\n  }\r\n}","import { Game, Types } from 'phaser'\r\nimport { BootScene } from '@/scenes/BootScene'\r\nimport { GameScene } from '@/scenes/GameScene'\r\n\r\n// Game configuration\r\nconst config: Types.Core.GameConfig = {\r\n  type: Phaser.AUTO,\r\n  width: 800,\r\n  height: 600,\r\n  parent: 'game-container',\r\n  backgroundColor: '#87CEEB',\r\n  scale: {\r\n    mode: Phaser.Scale.FIT,\r\n    autoCenter: Phaser.Scale.CENTER_BOTH,\r\n    min: {\r\n      width: 300,\r\n      height: 400\r\n    },\r\n    max: {\r\n      width: 1200,\r\n      height: 900\r\n    }\r\n  },\r\n  physics: {\r\n    default: 'arcade',\r\n    arcade: {\r\n      gravity: { x: 0, y: 300 },\r\n      debug: false\r\n    }\r\n  },\r\n  scene: [BootScene, GameScene]\r\n}\r\n\r\n// Initialize game\r\nlet game: Game | null = null\r\n\r\nexport function initializeGame(): Game {\r\n  if (game) {\r\n    game.destroy(true)\r\n  }\r\n\r\n  game = new Game(config)\r\n\r\n  // Development helper - only expose in dev mode\r\n  if (import.meta.env?.MODE === 'development') {\r\n    (window as any).game = game\r\n  }\r\n\r\n  return game\r\n}\r\n\r\nexport function getGame(): Game | null {\r\n  return game\r\n}\r\n\r\nexport function destroyGame(): void {\r\n  if (game) {\r\n    game.destroy(true)\r\n    game = null\r\n  }\r\n}\r\n\r\n// DO NOT auto-initialize - wait for user to click GIOCA\r\n// This prevents double initialization issues\r\n// Game will be initialized via startNewGame() function in index.html","import { createClient } from '@supabase/supabase-js'\r\n\r\n// Environment variables\r\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n\r\nconsole.log('🔍 Environment check:', {\r\n  url: supabaseUrl ? 'SET' : 'MISSING',\r\n  key: supabaseAnonKey ? 'SET' : 'MISSING',\r\n  env: import.meta.env\r\n})\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  console.error('❌ Missing env vars:', { supabaseUrl, supabaseAnonKey })\r\n  throw new Error(`Missing Supabase environment variables: URL=${!!supabaseUrl}, KEY=${!!supabaseAnonKey}`)\r\n}\r\n\r\n// Database types\r\nexport interface Profile {\r\n  id: string\r\n  email: string\r\n  nickname: string | null\r\n  consent_marketing: boolean\r\n  consent_timestamp: string | null\r\n  created_at: string\r\n}\r\n\r\nexport interface Score {\r\n  id: number\r\n  user_id: string\r\n  score: number\r\n  run_seconds: number\r\n  created_at: string\r\n}\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      profiles: {\r\n        Row: Profile\r\n        Insert: Omit<Profile, 'id' | 'created_at'>\r\n        Update: Partial<Omit<Profile, 'id' | 'created_at'>>\r\n      }\r\n      scores: {\r\n        Row: Score\r\n        Insert: Omit<Score, 'id' | 'created_at'>\r\n        Update: Partial<Omit<Score, 'id' | 'created_at'>>\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Create Supabase client\r\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true\r\n  }\r\n})\r\n\r\n// Check if user is admin\r\nexport const isAdmin = (userId: string): boolean => {\r\n  const adminUuids = import.meta.env.VITE_ADMIN_UUIDS?.split(',') || []\r\n  return adminUuids.includes(userId)\r\n}\r\n\r\n// Profile service\r\nexport const profileService = {\r\n  async getProfile(userId: string): Promise<Profile | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', userId)\r\n        .maybeSingle()\r\n\r\n      if (error) {\r\n        console.error('Error fetching profile:', error)\r\n        return null\r\n      }\r\n\r\n      return data as Profile | null\r\n    } catch (error) {\r\n      console.error('Profile fetch exception:', error)\r\n      return null\r\n    }\r\n  },\r\n\r\n  async createProfile(profile: Database['public']['Tables']['profiles']['Insert']): Promise<Profile | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .upsert(profile as any, {\r\n          onConflict: 'id',\r\n          ignoreDuplicates: false\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Error creating profile:', error)\r\n        return null\r\n      }\r\n\r\n      return data as Profile\r\n    } catch (error) {\r\n      console.error('Profile creation exception:', error)\r\n      return null\r\n    }\r\n  },\r\n\r\n  async updateProfile(userId: string, updates: Partial<Omit<Profile, 'id' | 'created_at'>>): Promise<Profile | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        // @ts-ignore - Temporary fix for type inference issue\r\n        .update(updates)\r\n        .eq('id', userId)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Error updating profile:', error)\r\n        return null\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('Profile update exception:', error)\r\n      return null\r\n    }\r\n  },\r\n\r\n  async checkNicknameAvailability(nickname: string, excludeUserId?: string): Promise<boolean> {\r\n    try {\r\n      if (!nickname || nickname.trim().length === 0) {\r\n        return true // Empty nicknames are allowed\r\n      }\r\n\r\n      const query = supabase\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('nickname' as any, nickname.trim())\r\n\r\n      if (excludeUserId) {\r\n        query.neq('id', excludeUserId)\r\n      }\r\n\r\n      const { data, error } = await query\r\n\r\n      if (error) {\r\n        console.error('Error checking nickname availability:', error)\r\n        return false\r\n      }\r\n\r\n      return data.length === 0\r\n    } catch (error) {\r\n      console.error('Nickname availability check exception:', error)\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n// Score service\r\nexport const scoreService = {\r\n  async submitScore(userId: string, score: number, runSeconds: number): Promise<Score | null> {\r\n    try {\r\n      // Get current session for authorization\r\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession()\r\n\r\n      if (sessionError || !session) {\r\n        console.error('No valid session for score submission')\r\n        return null\r\n      }\r\n\r\n      // Try Edge Function first (server-side validation)\r\n      try {\r\n        const { data, error } = await supabase.functions.invoke('submit-score', {\r\n          body: {\r\n            score,\r\n            runSeconds,\r\n            gameEndTimestamp: Date.now()\r\n          },\r\n          headers: {\r\n            Authorization: `Bearer ${session.access_token}`\r\n          }\r\n        })\r\n\r\n        if (error) throw error\r\n\r\n        if (data.success) {\r\n          console.log('Score submitted via Edge Function:', data.storedScore)\r\n          return {\r\n            id: data.storedScore.id,\r\n            user_id: userId,\r\n            score: data.storedScore.score,\r\n            run_seconds: data.storedScore.runSeconds,\r\n            created_at: new Date().toISOString()\r\n          }\r\n        }\r\n      } catch (edgeError) {\r\n        console.warn('Edge Function failed, using fallback:', edgeError)\r\n      }\r\n\r\n      // Fallback to direct database submission with client-side validation\r\n      if (score < 0 || score > 600) {\r\n        console.error('Invalid score range:', score)\r\n        return null\r\n      }\r\n\r\n      if (runSeconds < 5) {\r\n        console.error('Game too short, likely invalid:', runSeconds)\r\n        return null\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('scores')\r\n        .insert({\r\n          user_id: userId,\r\n          score,\r\n          run_seconds: runSeconds\r\n        } as any)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Database error submitting score:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('Score submitted via direct database:', data)\r\n      return data as Score\r\n\r\n    } catch (error) {\r\n      console.error('Score submission error:', error)\r\n      return null\r\n    }\r\n  },\r\n\r\n  async getWeeklyLeaderboard(limit: number = 50): Promise<Array<Score & { nickname: string }>> {\r\n    try {\r\n      // Calculate start of current week (Monday 00:00)\r\n      const now = new Date()\r\n      const dayOfWeek = now.getDay() || 7 // Make Sunday = 7\r\n      const startOfWeek = new Date(now)\r\n      startOfWeek.setDate(now.getDate() - dayOfWeek + 1)\r\n      startOfWeek.setHours(0, 0, 0, 0)\r\n\r\n      const { data, error } = await supabase\r\n        .from('scores')\r\n        .select(`\r\n          *,\r\n          profiles (nickname)\r\n        `)\r\n        .gte('created_at', startOfWeek.toISOString())\r\n        .order('score', { ascending: false })\r\n        .order('created_at', { ascending: true })\r\n        .limit(limit)\r\n\r\n      if (error) {\r\n        console.error('Error fetching weekly leaderboard:', error)\r\n        return []\r\n      }\r\n\r\n      return (data as any[]).map(item => ({\r\n        ...item,\r\n        nickname: item.profiles?.nickname || 'Anonymous'\r\n      }))\r\n    } catch (error) {\r\n      console.error('Weekly leaderboard exception:', error)\r\n      return []\r\n    }\r\n  },\r\n\r\n  async getMonthlyLeaderboard(limit: number = 50): Promise<Array<Score & { nickname: string }>> {\r\n    try {\r\n      // Calculate start of current month\r\n      const now = new Date()\r\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)\r\n\r\n      const { data, error } = await supabase\r\n        .from('scores')\r\n        .select(`\r\n          *,\r\n          profiles (nickname)\r\n        `)\r\n        .gte('created_at', startOfMonth.toISOString())\r\n        .order('score', { ascending: false })\r\n        .order('created_at', { ascending: true })\r\n        .limit(limit)\r\n\r\n      if (error) {\r\n        console.error('Error fetching monthly leaderboard:', error)\r\n        return []\r\n      }\r\n\r\n      return (data as any[]).map(item => ({\r\n        ...item,\r\n        nickname: item.profiles?.nickname || 'Anonymous'\r\n      }))\r\n    } catch (error) {\r\n      console.error('Monthly leaderboard exception:', error)\r\n      return []\r\n    }\r\n  }\r\n}","import { supabase, profileService, type Profile } from './SupabaseClient'\r\nimport type { User, Session } from '@supabase/supabase-js'\r\n\r\nexport interface AuthState {\r\n  user: User | null\r\n  profile: Profile | null\r\n  session: Session | null\r\n  isLoading: boolean\r\n  isAuthenticated: boolean\r\n  hasMarketingConsent: boolean\r\n}\r\n\r\nexport class AuthManager {\r\n  private state: AuthState = {\r\n    user: null,\r\n    profile: null,\r\n    session: null,\r\n    isLoading: true,\r\n    isAuthenticated: false,\r\n    hasMarketingConsent: false\r\n  }\r\n\r\n  private listeners: Array<(state: AuthState) => void> = []\r\n  private isProcessingAuth = false\r\n\r\n  constructor() {\r\n    this.initializeAuth()\r\n    this.setupAuthListeners()\r\n  }\r\n\r\n  private async initializeAuth(): Promise<void> {\r\n    try {\r\n      console.log('🔄 Initializing auth...')\r\n\r\n      // Get current session with timeout\r\n      const sessionPromise = supabase.auth.getSession()\r\n      const timeoutPromise = new Promise<never>((_, reject) =>\r\n        setTimeout(() => reject(new Error('Session timeout')), 5000)\r\n      )\r\n\r\n      const { data: { session }, error } = await Promise.race([sessionPromise, timeoutPromise])\r\n\r\n      if (error) {\r\n        console.error('Error getting session:', error)\r\n      }\r\n\r\n      if (session) {\r\n        console.log('✅ Session found, processing auth...')\r\n        await this.handleAuthChange(session)\r\n      } else {\r\n        console.log('ℹ️ No active session')\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Auth initialization error:', error)\r\n    } finally {\r\n      this.state.isLoading = false\r\n      this.notifyListeners()\r\n      console.log('✅ Auth initialization complete')\r\n    }\r\n  }\r\n\r\n  private setupAuthListeners(): void {\r\n    supabase.auth.onAuthStateChange(async (event, session) => {\r\n      console.log('🔄 Auth state change:', event)\r\n\r\n      switch (event) {\r\n        case 'SIGNED_IN':\r\n          if (session) {\r\n            await this.handleAuthChange(session)\r\n          }\r\n          break\r\n\r\n        case 'SIGNED_OUT':\r\n          this.resetAuthState()\r\n          break\r\n\r\n        case 'TOKEN_REFRESHED':\r\n          if (session) {\r\n            this.state.session = session\r\n            this.state.user = session.user\r\n          }\r\n          break\r\n      }\r\n\r\n      this.notifyListeners()\r\n    })\r\n  }\r\n\r\n  private async handleAuthChange(session: Session): Promise<void> {\r\n    if (this.isProcessingAuth) {\r\n      console.log('⏳ Already processing auth, skipping...')\r\n      return\r\n    }\r\n\r\n    this.isProcessingAuth = true\r\n\r\n    try {\r\n      console.log('👤 Processing auth for user:', session.user.email)\r\n\r\n      this.state.session = session\r\n      this.state.user = session.user\r\n      this.state.isAuthenticated = true\r\n\r\n      // Load or create profile\r\n      let profile = await profileService.getProfile(session.user.id)\r\n\r\n      if (!profile) {\r\n        console.log('📝 Creating new profile...')\r\n        profile = await profileService.createProfile({\r\n          email: session.user.email || '',\r\n          nickname: session.user.user_metadata?.name ||\r\n                   session.user.user_metadata?.full_name || null,\r\n          consent_marketing: false,\r\n          consent_timestamp: null\r\n        })\r\n      }\r\n\r\n      this.state.profile = profile\r\n      this.state.hasMarketingConsent = profile?.consent_marketing || false\r\n\r\n      console.log('✅ Auth processing complete:', {\r\n        email: session.user.email,\r\n        hasProfile: !!profile,\r\n        hasConsent: this.state.hasMarketingConsent\r\n      })\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error processing auth:', error)\r\n    } finally {\r\n      this.state.isLoading = false\r\n      this.isProcessingAuth = false\r\n    }\r\n  }\r\n\r\n  private resetAuthState(): void {\r\n    this.state = {\r\n      user: null,\r\n      profile: null,\r\n      session: null,\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      hasMarketingConsent: false\r\n    }\r\n  }\r\n\r\n  private notifyListeners(): void {\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener(this.state)\r\n      } catch (error) {\r\n        console.error('Error in auth listener:', error)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Public API\r\n  public subscribe(listener: (state: AuthState) => void): () => void {\r\n    this.listeners.push(listener)\r\n    listener(this.state) // Immediate call with current state\r\n\r\n    return () => {\r\n      const index = this.listeners.indexOf(listener)\r\n      if (index > -1) {\r\n        this.listeners.splice(index, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  public getState(): AuthState {\r\n    return { ...this.state }\r\n  }\r\n\r\n  public isReady(): boolean {\r\n    return !this.state.isLoading\r\n  }\r\n\r\n  public canPlayGame(): boolean {\r\n    return this.state.isAuthenticated\r\n  }\r\n\r\n  public canCompeteForPrizes(): boolean {\r\n    return this.state.isAuthenticated && this.state.hasMarketingConsent\r\n  }\r\n\r\n  public async signInWithGoogle(): Promise<{ success: boolean, error?: string }> {\r\n    try {\r\n      const { error } = await supabase.auth.signInWithOAuth({\r\n        provider: 'google'\r\n      })\r\n\r\n      if (error) {\r\n        console.error('Google sign in error:', error)\r\n        return { success: false, error: error.message }\r\n      }\r\n\r\n      return { success: true }\r\n\r\n    } catch (error) {\r\n      console.error('Google sign in exception:', error)\r\n      return { success: false, error: 'Unexpected error during sign in' }\r\n    }\r\n  }\r\n\r\n  public async signInWithOTP(email: string): Promise<{ success: boolean, error?: string }> {\r\n    try {\r\n      const { error } = await supabase.auth.signInWithOtp({\r\n        email\r\n      })\r\n\r\n      if (error) {\r\n        console.error('OTP sign in error:', error)\r\n        return { success: false, error: error.message }\r\n      }\r\n\r\n      return { success: true }\r\n\r\n    } catch (error) {\r\n      console.error('OTP sign in exception:', error)\r\n      return { success: false, error: 'Unexpected error during sign in' }\r\n    }\r\n  }\r\n\r\n  public async verifyOTP(email: string, token: string): Promise<{ success: boolean, error?: string }> {\r\n    try {\r\n      const { error } = await supabase.auth.verifyOtp({\r\n        email,\r\n        token,\r\n        type: 'email'\r\n      })\r\n\r\n      if (error) {\r\n        console.error('OTP verification error:', error)\r\n        return { success: false, error: error.message }\r\n      }\r\n\r\n      return { success: true }\r\n\r\n    } catch (error) {\r\n      console.error('OTP verification exception:', error)\r\n      return { success: false, error: 'Unexpected error during verification' }\r\n    }\r\n  }\r\n\r\n  public async signOut(): Promise<void> {\r\n    try {\r\n      const { error } = await supabase.auth.signOut()\r\n      if (error) throw error\r\n    } catch (error) {\r\n      console.error('Sign out error:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  public async updateProfile(updates: Partial<Profile>): Promise<Profile | null> {\r\n    if (!this.state.user) {\r\n      throw new Error('No authenticated user')\r\n    }\r\n\r\n    try {\r\n      const profile = await profileService.updateProfile(this.state.user.id, updates)\r\n\r\n      if (profile) {\r\n        this.state.profile = profile\r\n\r\n        if ('consent_marketing' in updates) {\r\n          this.state.hasMarketingConsent = profile.consent_marketing\r\n        }\r\n\r\n        this.notifyListeners()\r\n      }\r\n\r\n      return profile\r\n\r\n    } catch (error) {\r\n      console.error('Profile update error:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  public async refreshProfile(): Promise<void> {\r\n    if (!this.state.user) return\r\n\r\n    try {\r\n      const profile = await profileService.getProfile(this.state.user.id)\r\n      if (profile) {\r\n        this.state.profile = profile\r\n        this.state.hasMarketingConsent = profile.consent_marketing\r\n        this.notifyListeners()\r\n      }\r\n    } catch (error) {\r\n      console.error('Profile refresh error:', error)\r\n    }\r\n  }\r\n\r\n  public destroy(): void {\r\n    this.listeners = []\r\n  }\r\n}\r\n\r\n// Global instance\r\nexport const authManager = new AuthManager()\r\n\r\n// Helper to require authentication before playing\r\nexport const requireAuth = async (): Promise<boolean> => {\r\n  console.log('🎮 Checking auth for game access...')\r\n\r\n  if (authManager.canPlayGame()) {\r\n    console.log('✅ User can play!')\r\n    return true\r\n  }\r\n\r\n  if (!authManager.isReady()) {\r\n    console.log('⏳ Waiting for auth to initialize...')\r\n    await new Promise<void>(resolve => {\r\n      const unsubscribe = authManager.subscribe((state) => {\r\n        if (!state.isLoading) {\r\n          unsubscribe()\r\n          resolve()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  // If still not authenticated, show auth modal\r\n  if (!authManager.canPlayGame()) {\r\n    console.log('🔐 Showing auth modal...')\r\n    return new Promise<boolean>((resolve) => {\r\n      // Dynamic import to avoid circular dependency\r\n      import('../ui/AuthModal').then(({ AuthModal }) => {\r\n        const modal = new AuthModal()\r\n        modal.onAuth((success) => {\r\n          modal.destroy()\r\n          resolve(success && authManager.canPlayGame())\r\n        })\r\n        modal.show()\r\n      }).catch(error => {\r\n        console.error('Failed to load AuthModal:', error)\r\n        resolve(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  const canPlay = authManager.canPlayGame()\r\n  console.log('🎯 Final auth check result:', canPlay)\r\n  return canPlay\r\n}","\n    import { initializeGame, getGame, destroyGame } from './src/main.ts'\n    import { requireAuth } from './src/systems/AuthManager.ts'\n    import { languageManager } from './src/i18n/LanguageManager.ts'\n    import { characterManager } from './src/systems/CharacterManager.ts'\n\n    // Global game state\n    let gamePaused = false\n\n    // Initialize language system\n    function initializeLanguage() {\n      // Update all elements with data-i18n attributes\n      function updateTranslations() {\n        const translation = languageManager.getTranslation()\n        document.querySelectorAll('[data-i18n]').forEach(element => {\n          const key = element.getAttribute('data-i18n')\n          if (key && key in translation) {\n            if (key === 'footerControls') {\n              // Special handling for character-aware footer\n              updateFooterControls()\n            } else {\n              element.textContent = translation[key]\n            }\n          }\n        })\n\n        // Update language button\n        const langBtn = document.getElementById('language-btn')\n        if (langBtn) {\n          const currentLang = languageManager.getCurrentLanguage()\n          langBtn.textContent = `🌍 ${currentLang.toUpperCase()}`\n        }\n\n        // Update character button\n        const charBtn = document.getElementById('character-btn')\n        if (charBtn) {\n          const characterName = characterManager.getCurrentCharacterName()\n          charBtn.textContent = `🐱 ${characterName}`\n        }\n\n        // Update page language attribute\n        document.documentElement.lang = languageManager.getCurrentLanguage()\n      }\n\n      // Update footer with current character name\n      function updateFooterControls() {\n        const footerElement = document.querySelector('[data-i18n=\"footerControls\"]')\n        if (footerElement) {\n          const translation = languageManager.getTranslation()\n          const characterName = characterManager.getCurrentCharacterName()\n          footerElement.textContent = translation.footerControlsCharacter.replace('{character}', characterName)\n        }\n      }\n\n      // Set up language change listener\n      languageManager.onLanguageChange(updateTranslations)\n\n      // Set up character change listener\n      characterManager.onCharacterChange(() => {\n        updateFooterControls()\n        // Update character button text\n        const charBtn = document.getElementById('character-btn')\n        if (charBtn) {\n          const characterName = characterManager.getCurrentCharacterName()\n          charBtn.textContent = `🐱 ${characterName}`\n        }\n      })\n\n      // Initial translation update\n      updateTranslations()\n    }\n\n    // GLOBAL FUNCTIONS FOR BUTTONS\n    window.startNewGame = async function() {\n      console.log('🎮 Starting new game...')\n\n      // Check authentication first\n      const canPlay = await requireAuth()\n      if (!canPlay) {\n        console.log('❌ User not authenticated, game start cancelled')\n        return\n      }\n\n      console.log('✅ User authenticated, starting game...')\n      // Only destroy if game exists to avoid unnecessary recreation\n      const existingGame = getGame()\n      if (existingGame) {\n        console.log('🔄 Destroying existing game instance')\n        destroyGame()\n      }\n      initializeGame()\n    }\n\n    window.togglePause = function() {\n      const game = getGame()\n      if (!game) return\n\n      gamePaused = !gamePaused\n\n      if (gamePaused) {\n        game.scene.pause('GameScene')\n        const t = languageManager.getTranslation()\n        document.querySelector('.btn:nth-child(2)').textContent = '▶️ ' + t.resume\n        console.log('⏸️ Game paused')\n      } else {\n        game.scene.resume('GameScene')\n        const t = languageManager.getTranslation()\n        document.querySelector('.btn:nth-child(2)').textContent = '⏸️ ' + t.pause\n        console.log('▶️ Game resumed')\n      }\n    }\n\n    window.showInstructions = function() {\n      const modal = document.getElementById('instructions-modal')\n      if (modal) {\n        modal.style.display = 'block'\n        console.log('📖 Instructions modal opened')\n      }\n    }\n\n    window.closeInstructions = function() {\n      const modal = document.getElementById('instructions-modal')\n      if (modal) {\n        modal.style.display = 'none'\n        console.log('📖 Instructions modal closed')\n      }\n    }\n\n    // Close modal when clicking outside of content\n    window.onclick = function(event) {\n      const modal = document.getElementById('instructions-modal')\n      if (event.target === modal) {\n        closeInstructions()\n      }\n    }\n\n\n    window.toggleLanguage = function() {\n      languageManager.toggleLanguage()\n      console.log(`🌍 Language toggled to: ${languageManager.getCurrentLanguage()}`)\n    }\n\n    window.cycleCharacter = function() {\n      characterManager.cycleCharacter()\n      console.log(`🐱 Character changed to: ${characterManager.getCurrentCharacterName()}`)\n    }\n\n    // Mobile touch controls\n    let gameInstance = null\n    let touchLeftPressed = false\n    let touchRightPressed = false\n\n    function handleTouchControls() {\n      gameInstance = getGame()\n      if (!gameInstance) return\n\n      const gameScene = gameInstance.scene.getScene('GameScene')\n      if (!gameScene) return\n\n      // Simulate keyboard input\n      if (touchLeftPressed && gameScene.character) {\n        const { width } = gameScene.cameras.main\n        const margin = Math.max(40, width * 0.05)\n        const speed = Math.max(5, width * 0.006)\n        gameScene.character.x = Math.max(margin, gameScene.character.x - speed)\n      }\n      if (touchRightPressed && gameScene.character) {\n        const { width } = gameScene.cameras.main\n        const margin = Math.max(40, width * 0.05)\n        const speed = Math.max(5, width * 0.006)\n        gameScene.character.x = Math.min(width - margin, gameScene.character.x + speed)\n      }\n    }\n\n    // Auto-initialize when page loads\n    document.addEventListener('DOMContentLoaded', function() {\n      console.log('🚀 Etimuè Bottle Dropper v2.0.0 loaded!')\n\n      // Initialize language system\n      initializeLanguage()\n\n      // DO NOT initialize game here - wait for user to click GIOCA\n      // initializeGame() - REMOVED to fix double initialization bug\n\n      // Setup mobile touch controls\n      const touchLeft = document.getElementById('touch-left')\n      const touchRight = document.getElementById('touch-right')\n\n      if (touchLeft && touchRight) {\n        // Left button events\n        touchLeft.addEventListener('touchstart', (e) => {\n          e.preventDefault()\n          touchLeftPressed = true\n        })\n        touchLeft.addEventListener('touchend', (e) => {\n          e.preventDefault()\n          touchLeftPressed = false\n        })\n        touchLeft.addEventListener('mousedown', (e) => {\n          e.preventDefault()\n          touchLeftPressed = true\n        })\n        touchLeft.addEventListener('mouseup', (e) => {\n          e.preventDefault()\n          touchLeftPressed = false\n        })\n\n        // Right button events\n        touchRight.addEventListener('touchstart', (e) => {\n          e.preventDefault()\n          touchRightPressed = true\n        })\n        touchRight.addEventListener('touchend', (e) => {\n          e.preventDefault()\n          touchRightPressed = false\n        })\n        touchRight.addEventListener('mousedown', (e) => {\n          e.preventDefault()\n          touchRightPressed = true\n        })\n        touchRight.addEventListener('mouseup', (e) => {\n          e.preventDefault()\n          touchRightPressed = false\n        })\n\n        // Continuous movement loop\n        setInterval(handleTouchControls, 16) // ~60fps\n      }\n    })\n  "],"file":"assets/index-80099ef7.js"}